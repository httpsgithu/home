[alias]
	a	= add
	b	= branch
	ba	= !(git branch --all)
	bl	= blame
	bw	= "!f() { git blame -w --ignore-all-space --ignore-blank-lines $*; }; f"
	co	= checkout
	cou	= "!f() { git checkout $* && git up; }; f"
	cof	= "!f() { git checkout --force $*; }; f"
	ci	= commit
	cl	= "!f() { git clone --recursive $*; }; f"
	cp	= cherry-pick
	cpa	= !(git cherry-pick --abort)
	cpc	= !(git cherry-pick --continue)
	cpn	= "!f() { git cherry-pick --no-commit $*; }; f"
	th	= "!f() { git checkout --theirs $*; git add $*; }; f"
	ou	= "!f() { git checkout --ours $*; git add $*; }; f"
	d	= diff
	dd	= "!f() { git fetch && git diff origin/dev -- $*; }; f"
	dds	= "!f() { git diff origin/dev --stat -- $*; }; f"
	du	= "!f() { git fetch upstream && git diff upstream/master -- $*; }; f"
	dus	= "!f() { git diff upstream/master --stat -- $*; }; f"
	dm	= "!f() { git diff master -- $*; }; f"
	dms	= "!f() { git diff master --stat -- $*; }; f"
	do	= "!f() { git fetch && git diff origin/master -- $*; }; f"
	dos	= "!f() { git diff origin/master --stat -- $*; }; f"
	dt	= "!f() { git difftool -y $*; }; f"
	dw	= "!f() { git diff -w --ignore-all-space --ignore-blank-lines -- $*; }; f"
	d0	= "!f() { git diff --unified=0 -w --ignore-all-space --ignore-blank-lines $*; }; f"
	f	= fetch
	fa	= !(git fetch --all)
	ft	= !(git fetch --tags)
	l	= "!f() { git log $*; }; f"
	lp	= "!f() { git log -p -- $*; }; f"
	l0	= "!f() { git log -U0 -- $*; }; f"
	lm0	= "!f() { git log -m -U0 -- $*; }; f"
	lpw	= "!f() { git log -w --ignore-all-space --ignore-blank-lines -p -- $*; }; f"
	lf	= log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(cyan)<%an>%Creset' --abbrev-commit --date=relative
	m	= merge
	ma	= !(git merge --abort)
	msp	= "!f() { git merge -s recursive -X histogram -X ignore-all-space -X ignore-space-change -X ignore-space-at-eol -X renormalize $1; }; f"
	msq	= "!f() { git merge --squash $*; }; f"
	mt	= "!f() { git mergetool -y $*; }; f"
	p	= pull
	pa	= !(git pull --all)
	ra	= !(git rebase --abort)
	rc	= !(git rebase --continue)
	rem	= remote
	res	= "!f() { git reset -- $*; git checkout -- $*; }; f; f"
	ru	= "!f() { git reset upstream/master $*; }; f"
	rv	= "!f() { git remote -v $*; }; f"
	sh	= show
	st	= status
	s	= status
	su	= "!f() { git branch --set-upstream-to=origin/$1 $1; }; f"
	sub	= !(git submodule update --init --recursive)
	ss	= !(git submodule sync)
	sss	= "!f() { git submodule sync; git submodule update --init --recursive; }; f"
	t	= tag
	#up	= !(git pull || ((git stash && git pull --rebase >&2) | grep -v "No local changes to save" && git stash pop))
	up	= !(git stash && git pull --rebase >&2) | grep -v \"No local changes to save\" && git stash pop
	u	= !git us
	ua	= "!f() { git us; git fa; }; f"
	udd	= "!f() { git u && git upd && git dd; }; f"
	us	= "!f() { git up; git sub; }; f"
	ups	= !(git fetch upstream && git merge --no-edit upstream/master)
	upss	= !(git fetch upstream && git stash && git merge --no-edit upstream/master && git stash pop)
	upsp	= !(git fetch upstream && git merge --no-edit -s recursive -X histogram -X ignore-all-space -X ignore-space-change -X ignore-space-at-eol -X renormalize upstream/master)
	upsm	= !(git fetch upstream && git co upstream/master && git branch -D master && git checkout -b master)
	upd	= !(git fetch && git merge --no-edit origin/dev)
	upds	= !(git fetch && git merge --no-edit -s recursive -X histogram -X ignore-all-space -X ignore-space-change -X ignore-space-at-eol -X renormalize origin/dev)
	upb	= "!f() { echo squashing [$1] && git ups && git upsm && git branch -D $1 && git co master && git co -b $1 && git merge --squash origin/$1 && git su $1 && echo 'git commit && git push -f'; }; f"
	upbs	= "!f() { echo squashing [$1] && git ups && git upsm && git branch -D $1 && git co master && git co -b $1 && git merge --squash  -s recursive -X histogram -X ignore-all-space -X ignore-space-change -X ignore-space-at-eol -X renormalize origin/$1 && echo 'git commit && git push -f'; }; f"

[color]
	diff	= auto
	status	= auto
	branch	= auto
[core]
	editor	= mcedit
	pager   = less -F -X
[user]
	email	= proller@github.com
	name	= proller
[push]
	default	= current
[credential]
	helper	= cache --timeout=8640000
	helper	= store
[stash]
	showPatch = true
[rebase]
	autostash = true
[submodule]
#    recurse = true
